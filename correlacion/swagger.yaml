

openapi: 3.0.0
info:
  title: Sherlock User Module API
  description: Sherlock security user module interface
  version: 0.1.9
servers:
  - url: http://localhost:3032/
    description: development server
  - url: http://localhost:3032/
    description: Testing server

components:
  parameters:
    offsetParam:
      name: offset
      in: query
      description: offset of the list
      schema:
        type: integer
        default: 0
      required: false
    limitParam:
      name: limit
      in: query
      description: amount of items to be returned
      required: false
      schema:
        type: integer
        default: 10
  schemas:
    LogRequest:
      type: object
      properties:
        title: 
          type: string
          description: Log title
        description:
          type: string
          description: Log description
    Message:
      type: object
      properties:
        msg: 
          type: string
          description: message
      example:
        msg: OK
    LogHeader:
      type: object
      properties:
        _id:
          type: string
          description: Log ID
        title:
          type: string
          description: Log title
        description:
          type: string
          description: Log description
        projectId:
          type: string
          description: ID of the project
        status:
          type: string
          description: status of the log
          enum: 
          - processing
          - processed
      example:
        _id: 62d776f235ca54db99e4765e
        title: pepe.txt
        description: "This is a log file"
        projectId: 123456789
        status: "processing"
    Count:
      type: number
      description: Number of results in the database
      example: 10
tags:
  - name: Logs CRUD
    description: logs creation, modification and remove

paths:
  /project/:projectId/correlate/log:
    post:
      summary: Creates an array of logs
      tags: [Logs CRUD]
      description: Creates an array of logs
      requestBody:
        content: 
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  description: Logs to be correlated
                  items:
                    type: string
                metadata:
                  description: Metadata to be correlated, is an array of LogRequest as STRING
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/LogHeader'
    get:
      summary: Get logs
      tags: [Logs CRUD]
      parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - name: name
        in: query
        description: name of the organization
        required: false
        schema:
          type: string
          default: ""
      - name: status
        in: query
        description: used to filter organizations by enabled status
        schema:
          type: string
          default: ""
          enum:
          - processing
          - processed
        required: false
      responses:
        200:
          description: Logs page
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  rows:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/LogHeader'

  /project/:projectId/correlate/log/:logId:
    delete:
      summary: Delete especific log
      description: Delete especific log
      parameters:
      - name: projectId
        in: path
        description: "Project ID"
        required: true
        schema:
          type: integer
      - name: Log
        in: path
        description: "Log ID"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Messege acknowling it works
          content:
            application/json:
              schema: 
                type: object
                $ref: '#/components/schemas/Message'
