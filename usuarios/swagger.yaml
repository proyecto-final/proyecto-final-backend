

openapi: 3.0.0
info:
  title: Sherlock User Module API
  description: Sherlock security user module interface
  version: 0.1.9
servers:
  - url: http://localhost:3030/
    description: development server
  - url: http://localhost:3030/
    description: Testing server

components:
  schemas:
    AuthenticationRequest:
      type: object
      required:
        - title
        - author
      properties:
        username:
          type: string
          description: User identification name. It's setted in sign up page 
        password:
          type: string
          description: user password
      example:
        password: superSecretPassword123
        username: superCoolUsername
    UserRequest:
      type: object
      required:
        - title
        - author
      properties:
        password:
          type: string
          description: Current user password
        newPassword:
          type: string
          description: New password to be set on the user
      example:
        password: hj019dSAd181sgf79041er81Ñ23gda2
        newPassword: rodriCapo123-
    UserDataInfo:
      type: object
      properties:
        username:
          type: string
          description: Current user name
        name:
          type: string
          description: user name
        email:
          type: string
          description: user email
      example:
        name: pepe
        email: pepe@gmail.com
        username: pepe
    UserResponse:
      type: object
      required:
        - title
        - author
      properties:
        id:
          type: string
          description: The auto-generated id of the user
        username:
          type: string
          description: User identification name. It's setted in sign up page 
      example:
        id: hj019dSAd181sgf79041er81Ñ23gda2
        username: superCoolUsername
    Message:
      type: object
      required:
        - title
        - author
      properties:
        msg:
          type: string
          description: Status message
      example:
        msg: OK
    OrganizationRequest:
      type: object
      required:
        - title
        - author
      properties:
        name:
          type: string
          description: name of the organization
        color:
          type: string
          description: color that represents the organization
      example:
        name: "Nombre de organización"
        color: "#FF00FF"
    Organization:
      type: object
      required:
        - title
        - author
      properties:
        id:
          type: number
          description: id of the organization
        name:
          type: string
          description: name of the organization
        color:
          type: string
          description: color that represents the organization
        enable:
          type: boolean
          description: checks if the organization is enable
      example:
        id: 12345
        name: "Nombre de organización"
        color: "#FF00FF"
        enable: true

tags:
  - name: Auth
    description: authentication for users
  - name: Project CRUD
    description: project creation, modification and remove
  - name: User CRUD
    description: user creation, modification and remove
  - name: Organization CRUD
    description: organization data retrievement

paths:
  /api/organization:
      get:
        summary: Get organizations
        tags: [Organization CRUD]
        parameters:
        - name: offset
          in: query
          description: offest of the list
          type: number
          required: false
        - name: limit
          in: limit
          description: amount of items to be returned
          type: number
          required: false
        - name: name
          in: name
          description: name of the organization
          type: string
          required: false
        - name: enabled
          in: enabled
          description: used to filter organizations by enabled status
          type: boolean
          required: false
        responses:
          200:
            description: user information
            content:
            application/json:
                schema:
                    $ref: '#/components/schemas/UserResponse'
  /api/user/authenticate:
     post:
       summary: Authenticate the information for the current user
       tags: [Auth]
       requestBody:
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/AuthenticationRequest'
       responses:
         200:
           description: user information
           content:
             application/json:
               schema:
                   $ref: '#/components/schemas/UserResponse'

  /api/user/logout:
    post:
      summary: Invalidate the token for the current user
      tags: [Auth]
      responses:
        200:
          description: user information
          content:
            application/json:
              $ref: '#/components/schemas/Message'

  /api/user:
    patch:
      summary: Updates user information
      tags: [User CRUD]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: user information
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserResponse'

  /api/organization:
    post:
      summary: Post organizations
      tags: [Organization CRUD]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        200:
          description: user information
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Message'

  /api/organization/{organizationId}:
    patch:
      summary: Patch organizations
      tags: [Organization CRUD]
      parameters:
       - name: organizationId
         in: path
         description: Organization ID
         required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        200:
          description: user information
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Organization'
  /api/user/me:
    get:
      summary: Gets user information
      tags: [User CRUD]
      requestBody:
        required: false
      responses:
        200:
          description: user information
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserDataInfo'