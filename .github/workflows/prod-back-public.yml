name: Sherlock_BE_PROD
on:
  push:
    branches:
      - main
      - master
      - chore/sc-304/solucionar-problemas-de-pipeline-con-logica
env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_REPOSITORY: ${{ secrets.AWS_DEFAULT_ECR }}
  AWS_ECR_REPOSITORY_URI: ${{ secrets.AWS_DEFAULT_URI_ECR}}
  MONGO_CONNECTION:  ${{secrets.MONGO_DB_CONNECTION_STRING}}
  MYSQL_CONNECTION: ${{secrets.MYSQL_CONNECTION_STRING}}
  FIRST_TASK_DEFINITION:  ${{secrets.AWS_DEFAULT_FIRST_TASK}}
  SECOND_TASK_DEFINITION:  ${{secrets.AWS_DEFAULT_SECOND_TASK}}
  THIRD_TASK_DEFINITION:  ${{secrets.AWS_DEFAULT_THIRD_TASK}}
  CLUSTER_NAME: ${{secrets.AWS_DEFAULT_ECS_CLUSTER}}
  FIRST_SERVICE_NAME: ${{secrets.AWS_DEFAULT_ECS_FIRST_SERVICE}}
  SECOND_SERVICE_NAME: ${{secrets.AWS_DEFAULT_ECS_SECOND_SERVICE}}
  THIRD_SERVICE_NAME: ${{secrets.AWS_DEFAULT_ECS_THIRD_SERVICE}}
 
jobs:
  build-and-deploy-prod-docker-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set modules dependencies
      - run: | 
          mkdir ./usuarios/temp
          mkdir ./timeline/temp
          mkdir ./correlacion/temp
          mkdir ./busqueda/temp
          mkdir ./ips/temp
          cp -r ./shared ./usuarios/temp/shared
          cp -r ./shared ./timeline/temp/shared
          cp -r ./shared ./correlacion/temp/shared
          cp -r ./shared ./busqueda/temp/shared
          cp -r ./shared ./ips/temp/shared 
      - name: Deploy to prod (user module)
        id: build-image-user
        run: |
          aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY_URI
          docker build --build-arg MYSQL_CONNECTION_STRING=${{env.MYSQL_CONNECTION}} -t $AWS_REPOSITORY:usuarios usuarios
          docker tag $AWS_REPOSITORY:usuarios $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:usuarios
          docker push $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:usuarios
      - name: Deploy to prod (timeline module)
        id: build-image-timeline
        run: |
           aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY_URI
           docker build --build-arg MONGODB_URI=${{env.MONGO_CONNECTION}} -t $AWS_REPOSITORY:timeline timeline
           docker tag $AWS_REPOSITORY:timeline $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:timeline
           docker push $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:timeline
      - name: Download task definition
        id: get-first-task-definition
        run: |
          aws ecs describe-task-definition --task-definition $FIRST_TASK_DEFINITION --query taskDefinition > task-definition-user-timeline.json
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./task-definition-user-timeline.json
          service: ${{ env.FIRST_SERVICE_NAME }} 
          cluster:  ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
         
     ####CORELATION DEPLOY
      - name: Deploy to prod (correlation module)
        id: build-image-correlation
        run: |
          aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY_URI
          docker build --build-arg MONGODB_URI=${{env.MONGO_CONNECTION}} -t $AWS_REPOSITORY:correlacion correlacion
          docker tag $AWS_REPOSITORY:correlacion $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:correlacion
          docker push $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:correlacion
          echo "::set-output name=image::$AWS_ECR_REPOSITORY_URI:correlacion"
      - name: Download task definition
        id: get-second-task-definition
        run: |
          aws ecs describe-task-definition --task-definition $SECOND_TASK_DEFINITION --query taskDefinition > task-definition-correlation.json
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./task-definition-correlation.json
          service: ${{ env.SECOND_SERVICE_NAME }} 
          cluster:  ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
      
      ####SEARCH DEPLOY
      - name: Deploy to prod (search module)
        id: build-image-search
        run: |
          aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY_URI
          docker build --build-arg MONGODB_URI=${{env.MONGO_CONNECTION}} -t $AWS_REPOSITORY:busqueda busqueda
          docker tag $AWS_REPOSITORY:busqueda $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:busqueda
          docker push $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:busqueda
      - name: Deploy to prod (ips module)
        id: build-image-ips
        run: |
          aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY_URI
          docker build --build-arg MONGODB_URI=${{env.MONGO_CONNECTION}} -t $AWS_REPOSITORY:ips ips
          docker tag $AWS_REPOSITORY:ips $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:ips
          docker push $AWS_ECR_REPOSITORY_URI/$AWS_REPOSITORY:ips
      - name: Download task definition
        id: get-third-task-definition
        run: |
          aws ecs describe-task-definition --task-definition $THIRD_TASK_DEFINITION --query taskDefinition > task-definition-search-ips.json
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./task-definition-search-ips.json
          service: ${{ env.THIRD_SERVICE_NAME }} 
          cluster:  ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
      